{"version":3,"sources":["Difficulty.ts","API.ts","utils.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","StyledQuestionCard","styled","div","QuestionCard","props","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","Button","variant","color","disabled","onClick","value","StyledApp","App","useState","loading","setLoading","questions","setQuestions","setQuestionNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOVer","console","log","startTrivia","EASY","newQuestions","length","undefined","event","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b372f91b.chunk.js","sourcesContent":["export enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}","import {shuffleArray} from \"./utils\";\nimport {Difficulty} from \"./Difficulty\";\n\nexport interface Question {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n}\n\nexport interface QuestionState extends Question {\n  answers: string[];\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionState[]> => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question): QuestionState => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import React from 'react';\nimport {AnswerObject} from \"../App\";\nimport styled from \"styled-components\";\nimport Button from '@material-ui/core/Button';\n\n\nconst StyledQuestionCard = styled.div`\n  &.question-card {\n    .question-number {\n      font-size: 2rem;\n    }\n\n    .question-text {\n      font-size: 2rem;\n    }\n\n    .answer-button {\n      margin: 4px;\n      min-width: 200px;\n      background-color: pink;\n      color: #fff;\n\n      &:hover {\n        filter: brightness(90%);\n        background-color: pink;\n      }\n    }\n  }\n`\n\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n}\n\nexport const QuestionCard: React.FC<Props> = (props) => {\n  const {question, answers, callback, userAnswer, questionNumber, totalQuestions} = props;\n\n  return (\n    <StyledQuestionCard className=\"question-card\">\n      <p className=\"question-number\">\n        Question: {questionNumber} / {totalQuestions}\n      </p>\n\n      <p className=\"question-text\" dangerouslySetInnerHTML={{__html: question}} />\n      <div>\n        {answers.map(answer => (\n          <div key={answer}>\n            <Button\n              className=\"answer-button\"\n              variant=\"contained\"\n              color=\"default\"\n              disabled={userAnswer ? true : false}\n              onClick={callback}\n              value={answer}\n            >\n              <span dangerouslySetInnerHTML={{__html: answer}}/>\n            </Button>\n          </div>\n        ))}\n      </div>\n    </StyledQuestionCard>\n  );\n};","import React, {FC, useState} from 'react';\n\nimport {fetchQuizQuestions, QuestionState} from \"./API\";\nimport {QuestionCard} from \"./components/QuestionCard\";\nimport {Difficulty} from \"./Difficulty\";\nimport styled from \"styled-components\";\nimport Button from '@material-ui/core/Button';\n\nconst StyledApp = styled.div`\n  &.app {    \n    width: 100%;\n    height: 100vh;\n    padding: 15px;\n    display: flex;\n    flex: 1 1 auto;\n    flex-flow: column nowrap;\n    justify-content: flex-start;\n    align-items: center;\n    text-align: center;\n    background-image: url('beach-quotes.jpeg');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n    color: black;\n  }\n\n  .score {\n    font-size: 2rem;\n    margin: 0px;\n  }\n\n  .quiz-title {\n    font-size: 2rem;\n    font-family: Verdana;\n  }\n\n  .start-quiz-button {\n    min-width: 200px;\n    background-color: darkred;\n    color: #ffffff;\n\n    &:hover {\n      filter: brightness(90%);\n      background-color: darkred;\n    }\n  }\n\n  .next-question-button {\n    margin: 4px;\n    min-width: 200px;\n    background-color: aqua;\n    color: #ffffff;\n\n    &:hover {\n      filter: brightness(90%);\n      background-color: aqua;\n    }\n  }\n`\n\n\nexport interface AnswerObject {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\nexport const App: FC = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState<number>(0);\n  const [gameOver, setGameOVer] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOVer(false);\n\n    const newQuestions: QuestionState[] = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setQuestionNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //Users Answer\n      const answer = event.currentTarget.value;\n      //check answer against correct answer\n      const correct = questions[questionNumber].correct_answer === answer;\n      console.log(`answer is correct? ${correct}`);\n      console.log(`${questions[questionNumber].correct_answer}`);\n      console.log(questions[questionNumber]);\n      //add  score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      //save answer in the array for user answers\n      const answerObject = {\n        question: questions[questionNumber].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNumber].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move on to the next question if not the last question\n    const nextQuestion = questionNumber + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOVer(true);\n    } else {\n      setQuestionNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <StyledApp className=\"app\">\n      <p className=\"quiz-title\">React Quiz</p>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\n        <Button\n          className=\"start-quiz-button\"\n          variant=\"contained\"\n          color=\"default\"\n          onClick={startTrivia}\n        >\n          Start\n        </Button>\n      ) : null}\n\n      {!gameOver ? <p className=\"score\"> Score: {score}</p> : null}\n      {loading && <p>Loading Questions....</p>}\n\n      {!loading && !gameOver && (\n        <QuestionCard questionNumber={questionNumber + 1}\n                      totalQuestions={TOTAL_QUESTIONS}\n                      question={questions[questionNumber].question}\n                      answers={questions[questionNumber].answers}\n                      userAnswer={userAnswers ? userAnswers[questionNumber] : undefined}\n                      callback={checkAnswer}\n        />\n      )}\n\n      {!gameOver && !loading && userAnswers.length === questionNumber + 1 && questionNumber !== TOTAL_QUESTIONS - 1 ? (\n        <Button\n          className=\"next-question-button\"\n          variant=\"contained\"\n          color=\"default\"\n          onClick={nextQuestion}\n        >\n          Next Question\n        </Button>\n      ) : null}\n\n    </StyledApp>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}